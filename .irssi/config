servers = (
  {
    address = "localhost";
    chatnet = "WorkIRCnet";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "no";
  },
  {
    address = "localhost";
    chatnet = "BitlBeeIRCnet";
    port = "16667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "no";
  },
  { address = "im.bitlbee.org"; chatnet = "BitlBee"; port = "6667"; },
  { address = "irc.efnet.net"; chatnet = "EFNet"; port = "6667"; },
  { 
    address = "irc.undernet.org";
    chatnet = "Undernet";
    port = "6667";
  },
  { address = "irc.dal.net"; chatnet = "DALnet"; port = "6667"; },
  { 
    address = "irc.quakenet.org";
    chatnet = "QuakeNet";
    port = "6667";
  },
  { address = "silc.silcnet.org"; chatnet = "SILC"; port = "706"; },
  {
    address = "chat.freenode.net";
    chatnet = "IRCnet";
    # All freenode servers listen on ports 6665, 6666, 6667, 6697 (SSL only), 7000 (SSL only), 7070 (SSL only), 8000, 8001 and 8002. 
    port = "6665";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "yes";
  }
);

# for one chatnet, we can define multiple servers, so when we 
# connect to a network by command "/server NETWOKR NAME", irssi
# will try the servers one by one until finds a server that works
# all the servers create a network, and all the servers have the same 
# channels(not sure about this)
chatnets = {
  IRCnet = {
    type = "IRC";
    max_kicks = "4";
    max_msgs = "5";
    max_whois = "4";
    max_query_chans = "5";
    autosendcmd = "/msg nickserv identify vincent_wang enjoy@2007; wait 2000";
  };
  WorkIRCnet = {
    type = "IRC";
    max_kicks = "4";
    max_msgs = "5";
    max_whois = "4";
    max_query_chans = "5";
  };
  BitlBeeIRCnet = {
    type = "IRC";
    nick = "vincent_wang";
    max_query_chans = "5";
    max_kicks = "4";
    max_msgs = "5";
    max_whois = "4";
  };
  EFNet = { 
    type = "IRC";
    max_kicks = "4";
    max_msgs = "3";
    max_whois = "1";
  };
  Undernet = {
    type = "IRC";
    max_kicks = "1";
    max_msgs = "3";
    max_whois = "30";
  };
  DALnet = {
    type = "IRC";
    max_kicks = "4";
    max_msgs = "3";
    max_whois = "30";
  };
  QuakeNet = {
    type = "IRC";
    max_kicks = "1";
    max_msgs = "3";
    max_whois = "30";
  };
  SILC = { type = "SILC"; };
  BitlBee = { type = "IRC"; };
};

channels = (
  { name = "#irssi"; chatnet = "IRCnet"; autojoin = "yes"; },
  { name = "#rubyonrails"; chatnet = "IRCnet"; autojoin = "yes"; },
  { name = "#vim"; chatnet = "IRCnet"; autojoin = "yes"; },
  { name = "#ubuntu-cn"; chatnet = "IRCnet"; autojoin = "yes"; },
  { name = "#postgresql"; chatnet = "IRCnet"; autojoin = "yes"; },
  { name = "silc"; chatnet = "silc"; autojoin = "No"; },
  { name = "#archlinux"; chatnet = "IRCnet"; autojoin = "yes"; }
  { name = "#qt"; chatnet = "IRCnet"; autojoin = "yes"; }
);

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  UPTIME = "eval exec - expr `date +%s` - \\$F | awk '{print \"Irssi uptime: \"int(\\\\\\$1/3600/24)\"d \"int(\\\\\\$1/3600%24)\"h \"int(\\\\\\$1/60%60)\"m \"int(\\\\\\$1%60)\"s\" }'";
  CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode $C +e";
  ATAG = "WINDOW SERVER";
  unstickall = "window goto hilight; window stick off; window goto (status);window stick off; window goto #ANT; window stick off; window goto #delta; window stick off; window goto #dev; window stick off; window goto #exoweb; window stick off; window goto &bitlbee; window stick off; window goto #irssi; window stick off; window goto #postgresql; window stick off;";
  single = "unstickall; window hide; window hide";
  fortune = "exec - -o fortune -s ";
  wu = "window up";
  wd = "window down ";
  wl = "window last ";
  mklayout = "window 8; window show 2; window size 20; window show 6; window size 5; window 2; window stick 1 on; window stick 2 on; window stick 7 on; window 8; window stick 8 on; window stick 4 on; window stick 5 on; window 6; window stick 6 on;";
  cs = "msg chanserv op $C";
  l = "lastlog -regex ";
  resetlayout = "single; mklayout";
  dump = "script exec use Data::Dumper\\; print Data::Dumper->new([\\\\$0-])->Dump";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://irssi.org/help/";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        chanact = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
settings = {
  core = {
    real_name = "Vincent Wang";
    user_name = "vincent_wang";
    nick = "vincent_wang";
    recode_fallback = "utf-8";
    recode_out_default_charset = "utf-8";
    timestamp_format = "%H:%M";
  };
  "fe-common/core" = {
    print_active_channel = "no";
    beep_when_away = "no";
    theme = "default";
    window_history = "yes";
    autocreate_split_windows = "no";
    expand_escapes = "yes";
    hilight_nick_matches = "yes";
  };
  "fe-text" = { autostick_split_windows = "no"; actlist_sort = "refnum"; };
  "fe-common/irc" = { show_away_once = "no"; };
  "irc/core" = { alternate_nick = "vincent_wang"; };
  "perl/core/scripts" = {
    chanact_show_all = "no";
    chanact_separator = " ";
    chanact_show_alias = "yes";
    mail_show_message = "yes";
    mail_mailboxes = "2=~/sshfs/Mail/exoweb/work,";
    chanact_abbreviate_names = "0";
    openurl_app_ftp = "= screen lftp \"$1\"";
    openurl_watch_mail = "no";
    trackbar_string = "-";
    trackbar_style = "%r";
    wordcompletion_dsn = "DBI:SQLite2:dbname=/home/vincent/data/irssi/completion.db";
    wordcompletion_pass = " ";
    wordcompletion_user = "vincent";
    openurl_max_urls = "50";
    #openurl_app_http = "firefox -remote \"ping()\" && firefox -remote \"openURL( $1 )\" || firefox \"$1\" &";
    openurl_app_http = "open $1";
    growl_on_regex = "vincent_wang";
    growl_icon = "irssi-flame.png";
    growl_channel_regex = "0";
  };
};
keyboard = (
  { key = "^F"; id = "forward_character"; data = ""; },
  { key = "^B"; id = "backward_character"; data = ""; },
  { key = "window-^C"; id = "command"; data = "WINDOW NEW SPLIT"; },
  { key = "window-^K"; id = "command"; data = "WINDOW UP"; },
  { key = "window-^J"; id = "command"; data = "WINDOW DOWN"; },
  { key = "^X"; id = "active_window"; data = ""; },
  { key = "meta-h"; id = "change_window"; data = "1"; },
  { key = "meta-s"; id = "change_window"; data = "2"; },
  { key = "meta-u"; id = "change_window"; data = "3"; },
  { key = "meta-v"; id = "change_window"; data = "4"; },
  { key = "meta-r"; id = "change_window"; data = "5"; },
  { key = "meta-p"; id = "scroll_backward"; data = ""; },
  { key = "meta-b"; id = "change_window"; data = "7"; },
  { key = "meta-i"; id = "change_window"; data = "8"; },
  { key = "meta-a"; id = "change_window"; data = "9"; },
  { key = "meta-q"; id = "change_window"; data = "10"; },
  { key = "^f"; id = "scroll_forward"; data = ""; },
  { key = "^b"; id = "scroll_backward"; data = ""; },
  { key = "meta-n"; id = "scroll_forward"; data = ""; },
  { key = "^w"; id = "delete_previous_word"; data = ""; }
);
hilights = (
  {
    text = "scrum[^:]?";
    color = "%5";
    act_color = "%M";
    nick = "no";
    word = "yes";
  },
  {
    text = "vincent[^@]";
    color = "%R%4";
    act_color = "%R";
    nick = "no";
    word = "yes";
    regexp = "yes";
  }
);
ignores = (
  { mask = "*zzz*"; level = "NICKS"; },
  {
    ### i'm ignoring /joins /parts and /quits to improve readability
    level = "JOINS PARTS QUITS";
    network = "IRCnet";
  },
  { 
    level = "ACTIONS";
    pattern = "is (away|gone|back)";
    regexp = "yes";
  },
  { mask = "*afk*"; level = "NICKS"; },
  { mask = "*away*"; level = "NICKS"; }
);
logs = { };
completions = {
  sls = { value = "since last scrum:"; };
  bns = { value = "before next scrum:"; };
  ants = { value = "leopold, xiaofeng, vincent, sabrina"; };
};
windows = {
  1 = { name = "hilight"; sticky = "yes"; immortal = "yes"; };
  2 = { 
    immortal = "yes";
    name = "(status)";
    level = "ALL";
    sticky = "yes";
  };
  3 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#ubuntu-cn";
        tag = "IRCnet";
      }
    );
    sticky = "yes";
  };
  4 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#vim";
        tag = "IRCnet";
      }
    );
    sticky = "yes";
    parent = "3";
  };
  5 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#rubyonrails";
        tag = "IRCnet";
      }
    );
    sticky = "yes";
    parent = "2";
  };
  6 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#postgresql";
        tag = "IRCnet";
      }
    );
    sticky = "yes";
    parent = "2";
  };
  7 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "&bitlbee";
        tag = "BitlBeeIRCnet";
      }
    );
    sticky = "yes";
    parent = "2";
  };
  8 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#irssi";
        tag = "IRCnet";
      }
    );
    sticky = "yes";
    parent = "3";
  };
  9 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#archlinux";
        tag = "IRCnet";
      }
    );
    sticky = "yes";
    parent = "3";
  };
  10 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#qt";
        tag = "IRCnet";
      }
    );
    sticky = "yes";
    parent = "3";
  };
};
mainwindows = {
  3 = { first_line = "19"; lines = "20"; };
  2 = { first_line = "8"; lines = "10"; };
  1 = { first_line = "1"; lines = "7"; };
};
notifies = { scrum = { ircnets = ( "scrum", "in", "3", "minutes" ); }; };
